from Crypto.Util.number import inverse, long_to_bytes

import primefac

print("imports done")

n = 134049493752540418773065530143076126635445393203564220282068096099004424462500237164471467694656029850418188898633676218589793310992660499303428013844428562884017060683631593831476483842609871002334562252352992475614866865974358629573630911411844296034168928705543095499675521713617474013653359243644060206273
e = 65537
c = 110102068225857249266317472106969433365215711224747391469423595211113736904624336819727052620230568210114877696850912188601083627767033947343144894754967713943008865252845680364312307500261885582194931443807130970738278351511194280306132200450370953028936210150584164591049215506801271155664701637982648648103

print("variables set")

p , q = primefac.factorint(n).keys()
print(p, q)

print("prime factors solved")

#p = 27
#q = 29338993

phi = ( p - 1 ) * ( q - 1 )

d = inverse(e, phi)

m = pow(c, d, n)

print(long_to_bytes(m))
